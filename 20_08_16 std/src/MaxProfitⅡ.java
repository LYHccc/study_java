/**
 * 买卖股票的最佳时机Ⅱ
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 */
public class MaxProfitⅡ {
    /**
     * 连续上涨交易日： 则第一天买最后一天卖收益最大，等价于每天都买卖
     * 连续下降交易日： 则不买卖收益最大，即不会亏钱。
     * 遍历整个股票交易日价格列表，在所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）
     */
    public int maxProfit(int[] prices) {
        //连续上涨交易日： 则第一天买最后一天卖收益最大，等价于每天都买卖
        //连续下降交易日： 则不买卖收益最大，即不会亏钱。
        //遍历整个股票交易日价格列表，在所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）
        int res = 0;
        for(int i = 1; i < prices.length; i++){
            int num = prices[i] - prices[i - 1];
            if(prices[i] - prices[i - 1] > 0){
                res += num;
            }
        }
        return res;
    }
}
